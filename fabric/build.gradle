plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "maven-publish"
}

loom {
    accessWidenerPath = file("src/main/resources/dawn-config.accessWidener")
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.architectury.minecraft}"
    mappings loom.officialMojangMappings()

    modApi "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version)
    modApi fabricApi.module("fabric-screen-api-v1", rootProject.fabric_api_version)
    modApi fabricApi.module("fabric-key-binding-api-v1", rootProject.fabric_api_version)
    modApi fabricApi.module("fabric-lifecycle-events-v1", rootProject.fabric_api_version)

    /*implementation("blue.endless:jankson:${rootProject.jankson_version}")
    implementation("com.moandjiezana.toml:toml4j:${rootProject.toml4j_version}")
    implementation("org.yaml:snakeyaml:${rootProject.snakeyaml_version}")
    shadowCommon("blue.endless:jankson:${rootProject.jankson_version}")
    shadowCommon("com.moandjiezana.toml:toml4j:${rootProject.toml4j_version}") {
        exclude(module: "gson")
    }
    shadowCommon("org.yaml:snakeyaml:${rootProject.snakeyaml_version}")*/
    
    implementation("com.electronwill.night-config:core:${project.night_config_version}")
    implementation("com.electronwill.night-config:toml:${project.night_config_version}")
    shadowCommon("com.electronwill.night-config:core:${project.night_config_version}")
    shadowCommon("com.electronwill.night-config:toml:${project.night_config_version}")

    modCompileOnly("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive(false)
    }
    modLocalRuntime("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive(false)
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    inputs.property "version", project.version
}

shadowJar {
    /*relocate "blue.endless.jankson", "${rootProject.maven_group}.dawnconfig.shadowed.blue.endless.jankson"
    relocate "com.moandjiezana.toml", "${rootProject.maven_group}.dawnconfig.shadowed.com.moandjiezana.toml"
    relocate "org.yaml.snakeyaml", "${rootProject.maven_group}.dawnconfig.shadowed.org.yaml.snakeyaml"*/
    
    relocate "com.electronwill.nightconfig.core", "${rootProject.maven_group}.shadowed.com.electronwill.nightconfig.core"
    relocate "com.electronwill.nightconfig.toml", "${rootProject.maven_group}.shadowed.com.electronwill.nightconfig.toml"
    
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "shadow"
}

remapJar {
    input.set(shadowJar.archiveFile)
    dependsOn(shadowJar)
    archiveClassifier = "fabric"
    
    from rootProject.file("LICENSE")
}

plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "maven-publish"
}

configurations {
    shadowCommon
    dev
}

artifacts {
    dev(jar)
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.architectury.minecraft}"
    mappings loom.officialMojangMappings()

    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    /*modLocalRuntime("blue.endless:jankson:${rootProject.jankson_version}")
    modLocalRuntime("com.moandjiezana.toml:toml4j:${rootProject.toml4j_version}")
    modLocalRuntime("org.yaml:snakeyaml:${rootProject.snakeyaml_version}")
    forgeRuntimeLibrary(shadowCommon("blue.endless:jankson:${rootProject.jankson_version}"))
    forgeRuntimeLibrary(shadowCommon("com.moandjiezana.toml:toml4j:${rootProject.toml4j_version}") {
        exclude(module: "gson")
    })
    forgeRuntimeLibrary(shadowCommon("org.yaml:snakeyaml:${rootProject.snakeyaml_version}"))*/
    
    modLocalRuntime("com.electronwill.night-config:core:${project.night_config_version}")
    modLocalRuntime("com.electronwill.night-config:toml:${project.night_config_version}")
    forgeRuntimeLibrary(shadowCommon("com.electronwill.night-config:core:${project.night_config_version}"))
    forgeRuntimeLibrary(shadowCommon("com.electronwill.night-config:toml:${project.night_config_version}"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

processResources {
    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
    inputs.property "META-INF/neoforge.mods.toml", project.version
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "dawn-config.accessWidener"
    /*relocate "blue.endless.jankson", "${rootProject.maven_group}.dawnconfig.shadowed.blue.endless.jankson"
    relocate "com.moandjiezana.toml", "${rootProject.maven_group}.dawnconfig.shadowed.com.moandjiezana.toml"
    relocate "org.yaml.snakeyaml", "${rootProject.maven_group}.dawnconfig.shadowed.org.yaml.snakeyaml"*/
    
    relocate "com.electronwill.nightconfig.core", "${rootProject.maven_group}.shadowed.com.electronwill.nightconfig.core"
    relocate "com.electronwill.nightconfig.toml", "${rootProject.maven_group}.shadowed.com.electronwill.nightconfig.toml"    

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "shadow"
}

remapJar {
    input.set(shadowJar.archiveFile)
    dependsOn(shadowJar)
    archiveClassifier = "neoforge"

    from rootProject.file("LICENSE")
}
